extends ./layout

block content
    .pb-2.mt-2.mb-4.border-bottom
    h3 Test Google ReCaptcha V3

    form(id='captcha-form-id', method='POST').form-group.row.col-md-7
        input(type='hidden', name='_csrf', value=_csrf)
        input(type='hidden', name='g-recaptcha-response', value='')
        div !{captchaScript}
        
        button(type="button").btn.btn-light
            | Am I a robot ? 

    div(id='notifications')
    

    script.
        // wrapper over setTimeout: to handle errors
        const wait = ms => new Promise(resolve => setTimeout(resolve, ms));

        const form = document.getElementById('captcha-form-id');
        const recaptchaResponseInput = form[1];
        const button = form[2];
        const notifications = document.getElementById('notifications');

        let captchaCb_was_called = false;
        let warnings_rendered = false;
        

        // check if Google recaptcha script is loaded
        try {
            if (grecaptcha) {
                // if passed too long and no result 
                wait(2000).then(()=>{
                    if (!captchaCb_was_called){
                        console.error('Too slow response from Google recaptcha; over 2 seconds.')
                        renderWarnings("Internet too slow or no connection.");
                    }})
                }
            }
        catch (ReferrenceError) {
            console.error('Error loading grecaptcha from Google recaptcha.');
            renderWarnings("You may not have internet.");
        }


        function captchaCallback(token){
            captchaCb_was_called = true;
            removeWarnings(notifications);
            recaptchaResponseInput.setAttribute('value', token);
            //- button.classList.add('btn-success');
            button.setAttribute('class', 'btn btn-success');
            button.setAttribute('type', 'submit')
        }

        //- function captchaErrorCallback(err){
        //-     console.error(err);
        //-     renderWarnings("Something went really bad.");
        //- }


        function renderWarnings(msg){
            if (warnings_rendered) return;

            const warningMsg = document.createElement('div');
            warningMsg.setAttribute('class', 'alert alert-danger');
            warningMsg.innerHTML = msg;
            const reloadBtn = document.createElement('button', {type:'button'});
            reloadBtn.setAttribute('class', 'btn btn-primary');
            reloadBtn.innerHTML = "Refresh";
            reloadBtn.onclick = () => location.reload();

            notifications.appendChild(warningMsg);
            notifications.appendChild(reloadBtn);

            warnings_rendered = true;
        }

        function removeWarnings(parentElement){
            if (! warnings_rendered) return;

            while (parentElement.firstChild)
                parentElement.removeChild(parentElement.firstChild);
            
            warnings_rendered = false;
        }